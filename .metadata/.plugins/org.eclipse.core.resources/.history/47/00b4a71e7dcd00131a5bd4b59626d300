package Scene.Surface;

import RayTracing.Ray;
import RayTracing.Vector;


public class Sphere extends Surface
{

	/*
	 * "sph" = defines a new sphere 
 	 * 		params[0,1,2] = position of the sphere center (x, y, z) 
  	 * 		params[3] = radius 
  	 * 		params[4] = material index (integer). each defined material gets an 
  	 * 		automatic material index starting from 1, 2 and so on
	 */

	private Vector center;
	private double radius;
	
	public Vector getCenter()
	{
		return center;
	}
	
	public void setCenter(Vector center)
	{
		this.center = center;
	}

	public double getRadius()
	{
		return radius;
	}

	public void setRadius(double radius)
	{
		this.radius = radius;
	}

    public Vector intersect(Ray ray) {
        Vector a = center.sub(ray.getP0());
        double vDotProA = ray.getV().dotProduct(a);
        if (vDotProA < 0)
            return null;
        Vector R = ray.getV().mul(vDotProA/ray.getV().length());
        double q = Math.sqrt(a.length() - R.length()*R.length());
        if (q > radius)
            return null;
        double h = Math.sqrt(radius*radius - q*q);
        double RsubHdivV = (R.length()-h)/ray.getV().length();
        Vector closestPoint = ray.getV().mul(RsubHdivV).add(ray.getP0());
        return closestPoint;
    }	
	
	
}
