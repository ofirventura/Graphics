package Scene.Surface;

import RayTracing.Vector;


public class Sphere extends Surface
{

	/*
	 * "sph" = defines a new sphere 
 	 * 		params[0,1,2] = position of the sphere center (x, y, z) 
  	 * 		params[3] = radius 
  	 * 		params[4] = material index (integer). each defined material gets an 
  	 * 		automatic material index starting from 1, 2 and so on
	 */

	private Vector center;
	private double radius;
	
	public Vector getCenter()
	{
		return center;
	}
	
	public void setCenter(Vector center)
	{
		this.center = center;
	}

	public double getRadius()
	{
		return radius;
	}

	public void setRadius(double radius)
	{
		this.radius = radius;
	}

    public double intersect(Ray ray) {
        Vector p0 = ray.getP0();
        Vector v = ray.getV();
        Vector l = center.subtract(p0);
        double tca = l.dotProduct(v);
        if (tca < 0)
            return 0;
        double dSquare = l.dotProduct(l) - tca*tca;
        if (dSquare > radius*radius)
            return 0;

        double thc = Math.sqrt(radius*radius - dSquare);
        return (tca-thc < 0 && tca+thc > 0) ? EPSILON : tca-thc;
    }	
	
	
}
