import java.awt.image.BufferedImage;


public class SeamCarving {
	
	int width;  // m
	int height; // n
	int newWidth;
	int newHeight;
	BufferedImage img;
	double[][] gradientMap;
	boolean [][] removedPixels;
	
	
	public SeamCarving(BufferedImage img, int newWidth, int newHeight)
	{
		this.img = img;
		width = img.getHeight();
		height = img.getWidth();
		removedPixels = new boolean[height][width];
		this.newHeight = newHeight;
		this.newWidth = newWidth;
		// what to do if all pixels are used - newHeight or newWidth > 200% of the image ???
		
		// rgb = img.getRGB(0, 0, width, height, null, 0, width); 
	}
	
	public void Seam()
	{
		
		int SeamsToHandle = Math.abs(newWidth - width); // +1 ???
		for (int i = 0; i < SeamsToHandle; i++) {
			oneSeam();
		}
	
		
	}
	
	private void oneSeam() {
		gradientMap = calcMapGradient();
		double[][] dynamicMap = calcDynamicMap();
		/*
		int[] minCols = getMinColsForSeam(dynamicMap);
		int[] minCols1 = getMinColsForSeam(dynamicMap);
		int[] minCols2 = getMinColsForSeam(dynamicMap);
		int[] minCols3 = getMinColsForSeam(dynamicMap);
		int[] minCols4 = getMinColsForSeam(dynamicMap);
		*/
//		boolean toEnlarge = width < outWidth;
//        int newWidthDifference = !toEnlarge ? -1 : 1;
        /*int[] dynMap;
        if (!forwardEnergy)
            dynMap = calcBackwardMap();
        else
            dynMap = calcForwardMap();
*/
        // get the columns in each row with the least energy, from the last to the first
        //int[] columns = getMinColumns(dynMap);
		
		int[] minCols = getMinColsForSeam(dynamicMap);

        // build new pixel+energy maps, without that column
        int newWidth = width + 1;
        double[][] newPixels = new double[height][newWidth];
        double[][] newEnergy = new double[height][newWidth];
        boolean [][] newAlreadyUsed = new boolean[height][newWidth];
        for (int i = 0; i < height; i++) {
            int cutPlace = minCols[i];
            for (int j = 0; j < cutPlace; j++) {
                int newLocation = i * newWidth + j;
                int oldLocation = i * width + j;
                newPixels[i][j] = img.getRGB(i, j);
                newEnergy[i][j] = gradientMap[i][j];
                newAlreadyUsed[newLocation] = alreadyUsed[oldLocation];
                newAlreadyUsedRotated[newLocation] = alreadyUsedRotated[oldLocation];
            }
            if (toEnlarge) {
                int newLocation1 = i * newWidth + cutPlace;
                int newLocation2 = newLocation1 + newWidthDifference;
                int oldLocation = i * width + cutPlace;
                newPixels[newLocation1] = pixels[oldLocation];
                newPixels[newLocation2] = pixels[oldLocation];
                newEnergy[newLocation1] = energy[oldLocation];
                newEnergy[newLocation2] = energy[oldLocation];
                newAlreadyUsed[newLocation1] = true;
                newAlreadyUsed[newLocation2] = true;
                newAlreadyUsedRotated[newLocation1] = alreadyUsedRotated[oldLocation];
                newAlreadyUsedRotated[newLocation2] = alreadyUsedRotated[oldLocation];
            }
            for (int c = cutPlace + 1; c < width; c++) {
                int newLocation = i * newWidth + c + newWidthDifference;
                int oldLocation = i * width + c;
                newPixels[newLocation] = pixels[oldLocation];
                newEnergy[newLocation] = energy[oldLocation];
                newAlreadyUsed[newLocation] = alreadyUsed[oldLocation];
                newAlreadyUsedRotated[newLocation] = alreadyUsedRotated[oldLocation];
            }
        }

        // update arrays
        pixels = newPixels;
        energy = newEnergy;
        alreadyUsed = newAlreadyUsed;
        alreadyUsedRotated = newAlreadyUsedRotated;

        // set new width/height
        width += newWidthDifference;

        // fix energy surrounding the place removed
        if (!forwardEnergy)
            for (int r=0; r<height; r++) {
                int c = columns[r];
                for (int i = Math.max(0, r-1); i<=Math.min(height-1, r+1); i++)
                    for (int j = Math.max(0, c-1); j<=Math.min(width-1, c+1+newWidthDifference); j++)
                        calcSingleEnergy(i, j);
            }

		
		
		
	}

	/*
	 * i - row
	 * j - column
	 */
	private int convertIndex(int i, int j)
	{
		return i*width + j;
	}
	
	public double[][] calcMapGradient()
	{
		double[][] map = new double[height][width];
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				map[i][j] = calcSinglePixelGradient(i,j);
			}
		}
		return map;
	}

	private double calcSinglePixelGradient(int row_i, int col_j) {
		int numOfNeighbours = 0; // TODO: update initialize to 0
		double energy = 0;
		// this is only for a pixel with 8 neighbours
		// need to update the conditions of lower bound and upper bound
		// int upperBound = ... ; int lowerBound = ...;
		
		int row_lower = row_i-1;
		int row_upper = row_i+1;
		int column_lower = col_j-1;
		int column_upper = col_j+1;
		
		if (row_i == 0)
			row_lower = 0;
		if (row_i == height-1)
			row_upper = height-1;
		if (col_j == 0)
			column_lower = 0;
		if (col_j == width-1)
			column_upper = width-1;
		
		for (int i = row_lower; i <= row_upper; i++)
		{
			for (int j = column_lower; j <= column_upper; j++)
			{
				if (i == row_i && j == col_j)
					continue;
				
				energy += diffRGB(row_i, col_j, i, j);
				numOfNeighbours++;
			}
		}
		return energy / (double)numOfNeighbours;
	}

	/*
	 * val = abs(Ri-R1)+abs(Gi-G1)+abs(Bi-B1) / 3
	 * */
	private int diffRGB(int row_i, int col_j, int i, int j) {
		//System.out.println(" " +  i + " " + j);
		int pixel = img.getRGB(i, j);
	    int red_i   = (pixel >> 16) & 0xff;
	    int green_i = (pixel >> 8) & 0xff;
	    int blue_i  = (pixel) & 0xff;
		int neighbourPixel = img.getRGB(row_i, col_j);
	    int neighbourRed = (neighbourPixel >> 16) & 0xff;
	    int neighbourGreen = (neighbourPixel >> 8) & 0xff;
	    int neighbourBlue  = (neighbourPixel) & 0xff;
	    
		return (Math.abs(red_i-neighbourRed) + Math.abs(green_i-neighbourGreen) + Math.abs(blue_i-neighbourBlue)) / 3;
	}
	
	public double[][] calcMapEntropy()
	{
		double[][] map = new double[height][width];
		double[][] energyMap = calcMapGradient();
		
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				map[i][j] = (( energyMap[i][j] - calcSinglePixelEntropy(i,j)) / 2.0);
			}
		}
		
		return map;
	}

	private double calcSinglePixelEntropy(int row_i, int col_j) {
		
		double entropy = 0;
		
		int row_lower = row_i-4;
		int row_upper = row_i+4;
		int column_lower = col_j-4;
		int column_upper = col_j+4;
		int neighbour_grey = 0;
		
		if (row_i <= 3)
			row_lower = 0;
		if (row_i >= height-4)
			row_upper = height-1;
		if (col_j <= 3)
			column_lower = 0;
		if (col_j >= width-4)
			column_upper = width-1;
	
		//System.out.println(row_i + " " + col_j);
		//System.out.println("row upper" + row_upper);
		//System.out.println("row lower" + row_lower);
		//System.out.println("col upper" + column_upper);
		//System.out.println("col lower" + column_lower);
		
		for (int i = row_lower; i <= row_upper; i++)
		{
			for (int j = column_lower; j <= column_upper; j++)
			{
				neighbour_grey += calcGreyPixel(i,j);
			}
		}
		
		for (int i = row_lower; i <= row_upper; i++)
		{
			for (int j = column_lower; j <= column_upper; j++)
			{
				double p = p_mn(i,j,neighbour_grey);
				if (p != 0)
					entropy += p * Math.log(p);
			}
		}
		return entropy;
	}

	private int calcGreyPixel(int i, int j) {
		
		//System.out.println(i + " " + j);
		int pixel = img.getRGB(i, j);
	    int red = (pixel >> 16) & 0xff;
	    int green = (pixel >> 8) & 0xff;
	    int blue = (pixel) & 0xff;
		
	    return (red + green + blue) / 3;
	}

	private double p_mn(int i, int j, int neighbour_grey) {
				
		return ((double)calcGreyPixel(i, j)) / ((double)neighbour_grey);
	}

	/*
	private int calcGreyNeighbour(int row_i, int col_j) {
		int grey_neighbour = 0;
		
		int row_lower = row_i-2;
		int row_upper = row_i+2;
		int column_lower = col_j-2;
		int column_upper = col_j+2;
		
		if (row_i == 0)
			row_lower = 0;
		if (row_i == height-1)
			row_upper = height-1;
		if (col_j == 0)
			column_lower = 0;
		if (col_j == width-1)
			column_upper = width-1;
		
		for (int i = row_lower; i <= row_upper; i++)
		{
			for (int j = column_lower; j <= column_upper; j++)
			{
				grey_neighbour += calcGreyPixel(i, j);
			}
		}
		return grey_neighbour;
	}*/

	
	// M(i; j) = e(i; j)+
	// min(M(i-1; j-1);M(i-1; j);M(i-1; j+1))
	private double[][] calcDynamicMap()
	{
		double[][] map = new double[height][width];
		for (int j = 0; j < width; j++) {
			map[0][j] = gradientMap[0][j];
		}

		int currColIndex;
		double minAdd;
		for (int i = 1; i < height; i++)
		{
            for (int j = 0; j < width; j++) 
            {
            	// M(i; j) = e(i; j)+
            	// min(M(i-1; j-1);M(i-1; j);M(i-1; j+1))
            	currColIndex = j >= 1 ? j - 1 : j;
            	minAdd = gradientMap[i - 1][currColIndex];
            	if (gradientMap[i - 1][j] < minAdd)
            	{
            		currColIndex = j;
            	}
            	if (j < width - 1 && gradientMap[i - 1][j + 1] < minAdd)
            	{
            		currColIndex = j + 1;
            	}
				minAdd = map[i - 1][currColIndex];
				map[i][j] = gradientMap[i][j] + minAdd;
			}
		}
		return map;
	}
	
	private int[] getMinColsForSeam(double[][] map)
	{
		int minCols[] = new int[height];
		int right, middle, left;
		double currVal, leftVal, rightVal;
		minCols[height - 1] = minColOfLastRow(map); //initialize last row
		
		/*int prevCol = minCols[height - 1] = minColOfLastRow(map);
		int currCol = prevCol;
    	double min;
    	int leftUnusedCol = currCol;*/
    	/////////////////////
    	
		for (int i =  height - 2; i >= 0; i--)
		{
			middle = minCols[i+1];
            int currCol = (!removedPixels[i][middle]) ? middle : -1;
            currVal = map[i][middle];
            
            // leftmost free pixel
            left = middle - 1;
            while (left >= 0 && removedPixels[i][left])
            {
                left--;
            }
            
            if (left >= 0)
            {
                leftVal = map[i][left];
                if (currCol == -1 || leftVal < currVal) {
                    currCol = left;
                	currVal = leftVal;
                }
            }
            
            // rightmost free pixel
            right = middle + 1;
            while (right < width && removedPixels[i][right])
            {
                right++;
            }
            if (right < width)
            {
                rightVal = map[i][right];
                if (currCol == -1 || rightVal < currVal)
                    currCol = right;
            }
            
            minCols[i] = currCol;
			removedPixels[i][currCol] = true;
		}
		
		return minCols;
		
	}

	private int minColOfLastRow(double[][] map) {
		double curr;
		double min = map[height - 1][0];
		int minColOfLastRow = 0;
		for (int j = 0; j < width; j++) {
			curr = map[height - 1][j];
			if (curr < min)
			{
				min = curr;
				minColOfLastRow = j;
			}
		}
		return minColOfLastRow;
	}
	
	

}
