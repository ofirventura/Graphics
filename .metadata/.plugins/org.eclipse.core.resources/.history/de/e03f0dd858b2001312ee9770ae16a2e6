import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class SeamCarving {

	int width; // m : number of columns
	int height; // n : number of rows
	int newWidth;
	int newHeight;
	BufferedImage img;
	double[][] gradientMap;
	boolean[][] dontTouchThosePixels;
	EnergyType energy;

	public SeamCarving(BufferedImage img, int newWidth, int newHeight,
			int energyType) {
		this.img = img;
		width = img.getWidth();
		height = img.getHeight();
		dontTouchThosePixels = new boolean[height][width];
		this.newHeight = newHeight;
		this.newWidth = newWidth;
		
		switch (energyType) {
		case 0:
			energy = EnergyType.GRADIENT;
			break;
		case 1:
			energy = EnergyType.ENTROPY;
			break;
		case 2:
			energy = EnergyType.FORWARD;
			break;
		}

		// TODO: what to do if all pixels are used - newHeight or newWidth > 200% 
	}

	private enum EnergyType {
		GRADIENT, ENTROPY, FORWARD
	}

	private void transpose() {
		BufferedImage temp = new BufferedImage(height, width,
				BufferedImage.TYPE_INT_RGB);
		double[][] gradientTransposed = new double[width][height];
		int temp_length;

		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				temp.setRGB(i, j, img.getRGB(j, i));
				gradientTransposed[j][i] = gradientMap[i][j];
			}
		}

		img = temp;
		gradientMap = gradientTransposed;

		
		// Swap newWidth and newHeight
		temp_length = newWidth;
		newWidth = newHeight;
		newHeight = temp_length;

		// Swap width and height
		temp_length = width;
		width = height;
		height = temp_length;
	}

	public void Seam() throws IOException {

		// Vertical seams
		int SeamsToHandle = Math.abs(newWidth - width); // +1 ???
		for (int i = 0; i < SeamsToHandle; i++) {
			oneSeam();
		}

		transpose();
		dontTouchThosePixels = new boolean[height][width];
		SeamsToHandle = Math.abs(newWidth - width); // +1 ???

		// Horizontal seams
		for (int i = 0; i < SeamsToHandle; i++) {
			oneSeam();
		}

		transpose();
		File outputfile2 = new File("image_output2.jpg");
		ImageIO.write(img, "jpg", outputfile2);

	}

	private void oneSeam() {
		boolean biggerImage = width < newWidth;
		int diff = (biggerImage) ? 1 : -1;
		int colToDeal;
		switch (energy)
		{
		case GRADIENT:
			gradientMap = calcMapGradient();
			break;
		case ENTROPY:
			gradientMap = calcMapEntropy();
			break;
		case FORWARD: // TODO: update to forward calc
			gradientMap = calcMapGradient();
			break;
						
		}
		
		double[][] dynamicMap = calcDynamicMap();
		int newWidth = width + diff;
		boolean[][] newDontTouchThosePixels = new boolean[height][newWidth];
		double[][] newGradient = new double[height][newWidth];
		BufferedImage newImg = new BufferedImage(newWidth, height,
				BufferedImage.TYPE_INT_RGB);
		int[] minCols = getMinColsForSeam(dynamicMap);

		for (int i = 0; i < height; i++) {
			colToDeal = minCols[i];

			// What happens before the column:
			for (int j = 0; j < colToDeal; j++) {
				newGradient[i][j] = gradientMap[i][j];
				newDontTouchThosePixels[i][j] = dontTouchThosePixels[i][j];
				newImg.setRGB(j, i, img.getRGB(j, i));
			}

			// What happens in the column in case of enlarging: duplicate seam
			// and update matrices
			if (biggerImage) {
				newImg.setRGB(colToDeal, i, img.getRGB(colToDeal, i));
				newImg.setRGB(colToDeal + diff, i, img.getRGB(colToDeal, i));
				newGradient[i][colToDeal] = gradientMap[i][colToDeal];
				newGradient[i][colToDeal + diff] = gradientMap[i][colToDeal];
				newDontTouchThosePixels[i][colToDeal] = true;
				newDontTouchThosePixels[i][colToDeal + diff] = true;
			}

			// What happens after the column:
			for (int j = colToDeal + 1; j < width; j++)// ?
			{
				newGradient[i][j + diff] = gradientMap[i][j];
				newDontTouchThosePixels[i][j + diff] = dontTouchThosePixels[i][j];
				newImg.setRGB(j + diff, i, img.getRGB(j, i));
			}
		}
		gradientMap = newGradient;
		dontTouchThosePixels = newDontTouchThosePixels;
		img = newImg;
		width += diff;
	}

	/*
	 * i - row j - column
	 * 
	 * private int convertIndex(int i, int j) { return i * width + j; }
	 */

	public double[][] calcMapGradient() {
		double[][] map = new double[height][width]; // ?? new or update only
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				map[i][j] = calcSinglePixelGradient(i, j);
			}
		}
		return map;
	}

	private double calcSinglePixelGradient(int row_i, int col_j) {
		int numOfNeighbours = 0;
		double energy = 0;
		int row_lower = row_i - 1;
		int row_upper = row_i + 1;
		int column_lower = col_j - 1;
		int column_upper = col_j + 1;

		if (row_i == 0)
			row_lower = 0;
		if (row_i == height - 1)
			row_upper = height - 1;
		if (col_j == 0)
			column_lower = 0;
		if (col_j == width - 1)
			column_upper = width - 1;

		for (int i = row_lower; i <= row_upper; i++) {
			for (int j = column_lower; j <= column_upper; j++) {
				if (i == row_i && j == col_j)
					continue;

				energy += diffRGB(row_i, col_j, i, j);
				numOfNeighbours++;
			}
		}
		return energy / (double) numOfNeighbours;
	}

	/*
	 * val = abs(Ri-R1)+abs(Gi-G1)+abs(Bi-B1) / 3
	 */
	private int diffRGB(int row_i, int col_j, int i, int j) {
		int pixel = img.getRGB(j, i);
		int red_i = (pixel >> 16) & 0xff;
		int green_i = (pixel >> 8) & 0xff;
		int blue_i = (pixel) & 0xff;
		int neighbourPixel = img.getRGB(col_j, row_i);
		int neighbourRed = (neighbourPixel >> 16) & 0xff;
		int neighbourGreen = (neighbourPixel >> 8) & 0xff;
		int neighbourBlue = (neighbourPixel) & 0xff;

		return (Math.abs(red_i - neighbourRed)
				+ Math.abs(green_i - neighbourGreen) + Math.abs(blue_i
				- neighbourBlue)) / 3;
	}

	public double[][] calcMapEntropy() {
		double[][] map = new double[height][width];
		double[][] energyMap = calcMapGradient();

		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				map[i][j] = ((energyMap[i][j] - calcSinglePixelEntropy(i, j)) / 2.0);
			}
		}

		return map;
	}

	private double calcSinglePixelEntropy(int row_i, int col_j) {

		double entropy = 0;

		int row_lower = row_i - 4;
		int row_upper = row_i + 4;
		int column_lower = col_j - 4;
		int column_upper = col_j + 4;
		int neighbour_grey = 0;

		if (row_i <= 3)
			row_lower = 0;
		if (row_i >= height - 4)
			row_upper = height - 1;
		if (col_j <= 3)
			column_lower = 0;
		if (col_j >= width - 4)
			column_upper = width - 1;

		// System.out.println(row_i + " " + col_j);
		// System.out.println("row upper" + row_upper);
		// System.out.println("row lower" + row_lower);
		// System.out.println("col upper" + column_upper);
		// System.out.println("col lower" + column_lower);

		for (int i = row_lower; i <= row_upper; i++) {
			for (int j = column_lower; j <= column_upper; j++) {
				neighbour_grey += calcGreyPixel(i, j);
			}
		}

		for (int i = row_lower; i <= row_upper; i++) {
			for (int j = column_lower; j <= column_upper; j++) {
				double p = p_mn(i, j, neighbour_grey);
				if (p != 0)
					entropy += p * Math.log(p);
			}
		}
		return entropy;
	}

	private int calcGreyPixel(int i, int j) {

		// System.out.println(i + " " + j);
		int pixel = img.getRGB(i, j);
		int red = (pixel >> 16) & 0xff;
		int green = (pixel >> 8) & 0xff;
		int blue = (pixel) & 0xff;

		return (red + green + blue) / 3;
	}

	private double p_mn(int i, int j, int neighbour_grey) {

		return ((double) calcGreyPixel(i, j)) / ((double) neighbour_grey);
	}

	/*
	 * private int calcGreyNeighbour(int row_i, int col_j) { int grey_neighbour
	 * = 0;
	 * 
	 * int row_lower = row_i-2; int row_upper = row_i+2; int column_lower =
	 * col_j-2; int column_upper = col_j+2;
	 * 
	 * if (row_i == 0) row_lower = 0; if (row_i == height-1) row_upper =
	 * height-1; if (col_j == 0) column_lower = 0; if (col_j == width-1)
	 * column_upper = width-1;
	 * 
	 * for (int i = row_lower; i <= row_upper; i++) { for (int j = column_lower;
	 * j <= column_upper; j++) { grey_neighbour += calcGreyPixel(i, j); } }
	 * return grey_neighbour; }
	 */

	// M(i; j) = e(i; j)+
	// min(M(i-1; j-1);M(i-1; j);M(i-1; j+1))
	private double[][] calcDynamicMap() {
		double[][] map = new double[height][width];
		for (int j = 0; j < width; j++) {
			map[0][j] = gradientMap[0][j];
		}

		int currColIndex;
		double minAdd;
		for (int i = 1; i < height; i++) {
			for (int j = 0; j < width; j++) {
				currColIndex = j >= 1 ? j - 1 : j;
				minAdd = gradientMap[i - 1][currColIndex];
				if (gradientMap[i - 1][j] < minAdd) {
					currColIndex = j;
				}
				if (j < width - 1 && gradientMap[i - 1][j + 1] < minAdd) {
					currColIndex = j + 1;
				}
				minAdd = map[i - 1][currColIndex];
				map[i][j] = gradientMap[i][j] + minAdd;
			}
		}
		return map;
	}

	private int[] getMinColsForSeam(double[][] map) {
		int minCols[] = new int[height];
		int right, middle, left;
		double currVal, leftVal, rightVal;
		minCols[height - 1] = minColOfLastRow(map); // initialize last row
		for (int i = height - 2; i >= 0; i--) {
			middle = minCols[i + 1];
			int currCol = (!dontTouchThosePixels[i][middle]) ? middle : -1;
			currVal = map[i][middle];

			// leftmost free pixel
			left = middle - 1;
			while (left >= 0 && dontTouchThosePixels[i][left]) {
				left--;
			}

			if (left >= 0) {
				leftVal = map[i][left];
				if (currCol == -1 || leftVal < currVal) {
					currCol = left;
					currVal = leftVal;
				}
			}

			// rightmost free pixel
			right = middle + 1;
			while (right < width && dontTouchThosePixels[i][right]) {
				right++;
			}
			if (right < width) {
				rightVal = map[i][right];
				if (currCol == -1 || rightVal < currVal)
					currCol = right;
			}

			minCols[i] = currCol;
			dontTouchThosePixels[i][currCol] = true;
		}

		return minCols;

	}

	/*
	 * Initialization on the last row before calculating the whole seam
	 */
	private int minColOfLastRow(double[][] map) {
		double curr;
		double min = map[height - 1][0];
		int minColOfLastRow = 0;
		for (int j = 0; j < width; j++) {
			if (dontTouchThosePixels[height - 1][j])
				continue;
			curr = map[height - 1][j];
			if (curr < min) {
				min = curr;
				minColOfLastRow = j;
			}
		}

		dontTouchThosePixels[height - 1][minColOfLastRow] = true;
		return minColOfLastRow;
	}

}
